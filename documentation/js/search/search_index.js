var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.127,1,1.906]],["body/controllers/AppController.html",[0,1.859,1,3.144,2,1.526,3,0.585,4,0.511,5,0.44,6,3.411,7,0.713,8,0.037,9,1.03,10,2.709,11,3.411,12,0.585,13,0.078,14,2.581,15,1.86,16,0.031,17,0.031]],["title/modules/AppModule.html",[18,1.127,19,1.906]],["body/modules/AppModule.html",[1,2.911,2,1.512,3,0.425,4,0.371,5,0.32,7,0.766,8,0.038,9,0.748,10,2.698,11,2.477,12,0.425,13,0.056,16,0.025,17,0.025,18,1.721,19,3.671,20,1.843,21,1.351,22,1.669,23,1.669,24,1.351,25,2.591,26,1.669,27,2.477,28,2.477,29,2.477,30,2.698,31,3.006,32,2.433,33,2.277,34,1.669,35,1.498,36,3.001,37,2.557,38,3.001,39,3.001,40,3.001,41,3.001,42,1.498,43,2.477]],["title/injectables/AppService.html",[10,1.523,44,1.127]],["body/injectables/AppService.html",[3,0.56,4,0.489,5,0.421,7,0.56,8,0.037,9,0.985,10,2.444,12,0.56,13,0.074,16,0.03,17,0.03,44,1.809,45,2.198,46,3.263,47,0.799,48,2.444,49,5.564,50,1.202,51,3.953,52,1.973,53,1.809,54,1.973,55,3.953,56,3.953,57,2.469]],["title/controllers/AuthController.html",[0,1.127,58,1.906]],["body/controllers/AuthController.html",[0,1.511,2,1.511,3,0.579,4,0.506,5,0.436,7,0.708,8,0.037,9,1.02,12,0.579,13,0.077,14,2.555,15,1.841,16,0.031,17,0.031,58,3.125,59,3.377,60,2.906,61,3.377,62,2.433,63,3.377,64,4.091]],["title/modules/AuthModule.html",[18,1.127,30,1.523]],["body/modules/AuthModule.html",[2,1.612,3,0.468,4,0.408,5,0.352,7,0.737,8,0.037,9,0.823,12,0.468,13,0.062,16,0.027,17,0.027,18,1.806,20,1.486,21,1.486,22,1.836,23,1.836,24,1.486,25,2.719,26,2.719,30,2.829,32,1.965,33,2.428,34,1.836,35,1.648,37,2.063,58,3.055,62,2.686,63,2.726,65,2.726,66,2.726,67,2.726,68,3.302,69,2.727,70,3.302,71,2.726]],["title/injectables/AuthService.html",[44,1.127,62,1.373]],["body/injectables/AuthService.html",[3,0.404,4,0.353,5,0.304,7,0.56,8,0.038,9,0.712,12,0.404,13,0.054,15,1.285,16,0.024,17,0.024,42,1.974,44,1.461,45,1.588,47,0.577,48,1.974,50,1.38,52,1.974,53,2.113,54,2.265,62,1.781,69,1.783,72,2.357,73,2.961,74,4.901,75,4.54,76,2.471,77,2.357,78,2.224,79,2.855,80,2.2,81,2.2,82,1.09,83,1.611,84,2.855,85,2.855,86,3.956,87,3.747,88,2.524,89,2.855,90,2.029,91,2.357,92,2.357,93,2.357,94,2.029,95,2.357,96,2.855,97,2.357,98,1.783,99,2.855,100,2.855,101,2.855,102,2.357]],["title/classes/CreatePostDto.html",[13,0.057,103,1.697]],["body/classes/CreatePostDto.html",[3,0.166,4,0.145,5,0.125,7,0.522,8,0.038,12,0.166,13,0.049,16,0.012,17,0.012,47,0.237,50,1.351,53,1.857,57,2.451,82,1.449,83,1.909,98,0.733,102,2.505,103,1.104,104,0.528,105,0.834,106,1.161,107,2.801,108,2.58,109,2.156,110,3.405,111,2.58,112,3.393,113,4.125,114,2.411,115,3.923,116,3.239,117,2,118,1.173,119,2.485,120,3.182,121,1.173,122,1.173,123,1.985,124,1.985,125,1.985,126,1.985,127,1.173,128,1.895,129,1.173,130,1.173,131,3.683,132,3.034,133,1.985,134,1.638,135,1.638,136,1.173,137,1.173,138,2.129,139,2.58,140,1.173,141,3.034,142,1.173,143,1.985,144,1.985,145,1.985,146,1.985,147,1.985,148,1.985,149,1.173,150,1.173,151,1.985,152,1.985,153,1.985,154,1.985,155,1.985,156,1.985,157,1.173,158,1.173,159,1.173,160,1.173,161,3.034,162,3.034,163,1.638,164,1.985,165,1.985,166,1.638,167,1.985,168,1.985,169,1.985,170,1.173,171,1.985,172,1.638,173,1.173,174,2.801,175,1.173,176,1.986,177,1.173,178,1.173,179,1.173,180,3.393,181,1.173,182,1.173,183,1.173,184,1.173,185,2.58,186,1.985,187,1.173,188,1.985,189,1.985,190,2.119,191,2.787,192,2.617,193,1.985,194,0.968,195,0.968,196,1.638,197,1.985,198,0.585,199,0.834,200,1.173,201,1.173,202,1.173,203,2.801,204,3.405,205,0.585,206,1.41,207,1.638,208,1.173,209,0.968,210,1.173,211,0.968,212,1.173,213,1.173,214,1.173,215,1.173,216,1.173,217,1.173,218,1.173,219,1.173,220,0.968,221,3.041,222,1.638,223,1.985,224,2.58,225,1.173,226,1.173,227,1.173,228,1.173,229,0.968,230,1.173,231,1.687,232,1.173,233,1.833,234,0.968,235,1.985,236,1.985,237,1.173]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.057,128,1.906]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.513,4,0.448,5,0.386,7,0.513,8,0.037,12,0.513,13,0.087,16,0.029,17,0.029,47,0.732,50,1.41,53,1.712,82,1.278,104,1.63,106,2.087,109,3.633,117,2.087,119,2.302,128,2.896,190,3.367,192,3.294,198,1.807,231,2.843,233,3.633,238,4.221,239,2.99,240,3.622,241,3.622,242,3.622]],["title/classes/CreateUserDto.html",[13,0.057,243,1.697]],["body/classes/CreateUserDto.html",[3,0.372,4,0.325,5,0.28,7,0.372,8,0.037,12,0.372,13,0.07,16,0.023,17,0.023,47,0.531,50,1.437,53,2.013,82,1.302,83,1.52,87,3.583,90,3.084,104,1.182,106,1.68,117,2.127,163,3.08,166,3.08,190,2.951,191,2.651,192,3.357,194,2.169,195,2.169,196,2.169,198,1.311,209,3.08,211,3.08,220,3.08,243,2.075,244,4.12,245,1.867,246,3.583,247,4.34,248,2.627,249,2.627,250,2.627,251,2.627,252,2.627,253,2.627,254,2.627,255,4.725,256,3.732,257,3.732,258,3.732,259,3.732,260,3.732,261,3.08,262,1.862,263,3.732,264,3.732,265,3.732,266,2.627,267,3.732,268,2.627,269,2.627,270,2.627,271,2.627,272,2.627,273,2.627,274,2.627,275,2.627,276,2.627,277,2.169,278,2.627,279,2.627]],["title/classes/GetUsersParamDto.html",[13,0.057,280,1.697]],["body/classes/GetUsersParamDto.html",[3,0.485,4,0.424,5,0.365,7,0.705,8,0.037,12,0.485,13,0.094,16,0.028,17,0.028,42,2.232,47,0.692,50,1.042,82,1.372,83,1.822,88,3.045,104,1.542,106,2.013,117,1.542,120,2.794,176,1.396,191,3.178,198,1.71,199,2.434,204,3.692,205,1.71,262,2.485,280,2.487,281,3.692,282,2.487,283,2.828,284,3.426,285,3.692,286,3.426,287,3.426,288,3.692,289,3.426]],["title/classes/PatchPostDto.html",[13,0.057,290,1.906]],["body/classes/PatchPostDto.html",[3,0.495,4,0.433,5,0.373,7,0.712,8,0.037,12,0.495,13,0.085,16,0.028,17,0.028,47,0.707,50,1.064,82,0.964,88,3.065,103,2.521,104,1.575,106,2.041,117,1.575,119,2.041,176,1.425,190,2.832,198,1.746,203,3.743,205,1.746,262,2.262,288,3.743,290,2.832,291,3.743,292,2.888,293,3.743,294,4.534,295,3.499,296,4.534,297,4.534,298,3.499,299,2.888]],["title/classes/PatchUserDto.html",[13,0.057,300,1.906]],["body/classes/PatchUserDto.html",[3,0.585,4,0.511,5,0.44,7,0.713,8,0.037,12,0.585,13,0.078,16,0.031,17,0.031,104,1.86,138,3.411,243,2.298,245,2.936,293,4.155,299,3.411,300,3.144,301,3.411,302,5.034,303,3.411,304,3.411,305,3.411]],["title/controllers/PostsController.html",[0,1.127,306,1.906]],["body/controllers/PostsController.html",[0,0.814,2,0.814,3,0.312,4,0.273,5,0.235,7,0.659,8,0.038,9,0.55,12,0.312,13,0.041,14,1.377,15,0.992,16,0.02,17,0.02,43,3.241,47,0.445,48,1.639,50,1.194,52,1.959,53,1.607,54,1.639,60,1.566,73,2.951,80,2.183,81,2.183,82,1.082,83,1.599,103,2.712,114,2.334,117,1.767,119,2.388,176,1.772,205,1.1,290,2.717,306,2.052,307,1.82,308,2.205,309,3.285,310,3.285,311,3.285,312,2.205,313,2.205,314,3.285,315,2.334,316,3.285,317,4.35,318,4.35,319,2.711,320,2.205,321,2.205,322,3.285,323,2.205,324,2.711,325,2.205,326,2.205,327,4.35,328,3.285,329,3.591,330,3.285,331,3.285,332,3.285,333,2.205,334,3.285,335,2.205,336,1.82,337,1.566,338,2.711,339,1.959,340,1.82,341,3.241,342,3.241,343,1.82,344,2.205,345,1.82,346,2.205,347,2.205,348,2.205,349,2.205,350,2.205,351,2.711,352,2.205,353,2.205,354,2.205,355,2.205]],["title/modules/PostsModule.html",[18,1.127,31,1.697]],["body/modules/PostsModule.html",[2,1.634,3,0.477,4,0.417,5,0.359,7,0.743,8,0.037,9,0.84,12,0.477,13,0.063,16,0.027,17,0.027,18,1.824,20,1.517,21,1.517,22,1.874,23,1.874,24,1.517,25,2.747,26,1.874,31,3.215,32,2.516,33,2.46,34,1.874,35,1.682,37,2.764,71,2.782,306,3.085,339,2.79,340,2.782,356,2.782,357,3.37,358,2.782,359,3.37,360,3.37]],["title/injectables/PostsService.html",[44,1.127,339,1.523]],["body/injectables/PostsService.html",[3,0.434,4,0.379,5,0.327,7,0.589,8,0.038,9,0.765,12,0.434,13,0.058,14,1.917,15,1.381,16,0.026,17,0.026,42,2.521,44,1.535,45,1.706,47,0.62,48,2.074,50,1.264,52,1.531,53,1.741,54,1.531,73,2.621,76,1.917,77,2.533,78,2.217,80,2.311,81,2.311,82,1.145,83,1.693,92,2.533,98,1.917,107,3.431,116,3.431,282,1.706,324,2.533,339,2.074,361,2.533,362,3.431,363,3.068,364,4.156,365,3.068,366,2.18,367,2.533,368,3.068,369,4.17,370,3.068,371,3.068,372,3.068,373,3.068]],["title/controllers/UsersController.html",[0,1.127,374,1.906]],["body/controllers/UsersController.html",[0,0.538,2,0.538,3,0.206,4,0.18,5,0.155,7,0.581,8,0.038,9,0.363,12,0.206,13,0.027,15,0.655,16,0.021,17,0.015,42,1.731,47,0.294,48,1.185,50,0.914,52,1.501,53,0.538,54,2.393,60,1.034,73,2.594,76,0.909,78,1.225,80,1.672,81,2.125,82,1.191,83,1.413,88,2.125,94,1.034,98,0.909,114,1.034,117,1.353,119,1.562,120,2.167,134,2.864,135,2.482,172,1.202,176,1.67,205,0.726,222,1.96,229,1.202,231,0.809,243,2.404,261,1.202,262,2.5,277,1.202,280,2.507,282,2.786,285,1.202,300,2.817,305,1.96,315,1.687,319,1.96,329,1.96,336,1.202,337,2.137,338,2.482,341,1.96,342,1.96,343,1.202,345,1.202,351,1.202,366,1.034,374,1.483,375,1.202,376,2.374,377,3.007,378,2.374,379,1.456,380,1.456,381,1.456,382,4.053,383,3.621,384,1.456,385,2.374,386,2.374,387,2.374,388,1.456,389,2.374,390,1.96,391,1.456,392,2.374,393,2.374,394,2.374,395,4.1,396,3.469,397,1.456,398,2.374,399,2.374,400,3.007,401,1.456,402,1.456,403,1.456,404,3.007,405,1.456,406,1.456,407,1.202,408,1.202,409,1.202,410,3.007,411,1.456,412,1.456,413,1.456,414,1.456,415,3.469,416,1.456,417,1.456,418,2.374,419,2.864,420,1.456,421,1.456,422,1.456,423,1.202,424,1.456,425,1.456,426,1.456,427,1.456,428,1.456,429,1.456,430,1.456,431,1.456,432,1.202,433,1.456,434,1.456,435,1.456,436,1.456,437,1.456,438,1.456,439,1.456,440,1.456,441,1.456,442,1.456,443,1.456,444,1.456,445,1.456,446,1.456,447,2.374,448,2.374,449,3.007,450,3.007,451,1.456,452,1.456,453,1.456,454,1.456,455,1.456,456,1.456]],["title/modules/UsersModule.html",[18,1.127,32,1.373]],["body/modules/UsersModule.html",[2,1.612,3,0.468,4,0.408,5,0.352,7,0.737,8,0.037,9,0.823,12,0.468,13,0.062,16,0.027,17,0.027,18,1.806,20,1.486,21,1.486,22,1.836,23,1.836,24,1.486,25,2.719,26,2.719,30,2.178,32,2.552,33,2.428,34,1.836,35,1.648,37,2.063,69,2.727,78,2.43,374,3.055,409,2.726,457,2.726,458,2.726,459,2.726,460,3.302,461,3.302,462,3.302]],["title/injectables/UsersService.html",[44,1.127,78,1.243]],["body/injectables/UsersService.html",[3,0.275,4,0.24,5,0.207,7,0.514,8,0.038,9,0.483,12,0.275,13,0.083,15,0.873,16,0.018,17,0.018,42,2.317,44,1.101,45,1.079,47,0.392,48,1.488,50,1.104,52,2.034,53,1.715,54,1.488,61,1.601,62,2.429,69,1.211,73,2.582,76,2.546,78,1.66,80,2.019,81,2.019,82,1.001,83,1.479,88,2.689,90,2.896,91,1.601,93,1.601,94,1.378,97,2.461,176,1.479,246,3.364,262,2.317,280,2.266,282,2.689,337,3.125,362,2.997,366,1.378,367,1.601,382,3.364,383,2.896,407,1.601,408,1.601,423,3.364,463,1.601,464,2.981,465,2.461,466,2.981,467,2.981,468,2.981,469,2.981,470,1.94,471,1.94,472,2.981,473,2.981,474,2.981,475,2.981,476,1.94,477,1.94,478,2.981,479,3.631,480,2.981,481,2.981,482,2.981,483,1.94,484,2.981,485,2.981,486,1.94,487,1.94,488,1.94,489,1.94,490,1.94,491,1.94,492,1.94,493,2.981,494,2.981]],["title/coverage.html",[495,2.942]],["body/coverage.html",[0,1.818,1,1.802,5,0.307,6,2.382,8,0.037,10,1.44,13,0.101,16,0.025,17,0.025,24,1.299,44,1.818,46,2.382,58,1.802,59,2.382,62,1.299,72,2.382,78,1.175,82,0.795,103,1.604,105,2.831,109,2.05,119,1.299,128,1.802,206,2.05,234,2.382,238,2.382,239,2.382,243,1.604,244,2.382,245,2.831,280,1.604,281,2.382,282,1.604,283,2.382,290,1.802,291,2.382,292,2.382,300,1.802,301,2.382,306,1.802,307,2.382,315,2.05,339,1.44,361,2.382,374,1.802,375,2.382,463,2.382,465,2.382,495,2.05,496,2.382,497,2.885,498,5.95,499,5.166,500,4.565,501,4.565,502,2.382,503,2.885,504,3.985,505,2.885,506,2.885,507,2.885,508,2.885,509,2.885,510,2.885]],["title/dependencies.html",[21,1.649,511,2.113]],["body/dependencies.html",[5,0.413,8,0.038,9,0.967,13,0.091,16,0.03,17,0.03,21,1.746,57,2.423,198,1.935,199,2.756,205,1.935,303,3.202,304,3.202,512,3.879,513,3.879,514,5.278,515,3.879,516,3.879,517,3.879,518,3.879,519,3.879,520,3.879,521,3.879,522,3.879,523,3.879,524,3.879,525,3.879,526,3.879,527,3.879]],["title/miscellaneous/enumerations.html",[528,1.277,529,3.024]],["body/miscellaneous/enumerations.html",[8,0.037,16,0.03,17,0.03,47,0.773,110,3.961,119,2.16,174,3.961,231,3.299,383,3.409,528,1.908,529,3.157,530,3.824,531,3.824,532,3.824,533,4.799,534,4.799,535,4.799,536,3.824,537,3.824,538,3.824,539,4.799,540,4.799]],["title/miscellaneous/functions.html",[528,1.277,541,3.024]],["body/miscellaneous/functions.html",[8,0.033,16,0.033,17,0.033,24,2.55,47,0.923,502,3.771,528,2.279,541,3.771,542,4.568]],["title/index.html",[47,0.517,543,2.56,544,2.56]],["body/index.html",[4,0.247,8,0.035,16,0.019,17,0.019,35,2.344,57,3.146,95,3.877,120,2.584,176,0.813,221,1.648,233,1.418,369,2.515,390,1.648,432,3.877,495,1.418,496,2.515,545,1.996,546,1.996,547,3.696,548,3.047,549,1.996,550,1.996,551,1.996,552,1.996,553,3.047,554,3.696,555,1.996,556,1.996,557,4.137,558,1.996,559,5.037,560,1.996,561,4.885,562,1.996,563,1.996,564,1.996,565,3.047,566,1.996,567,3.047,568,1.996,569,3.696,570,1.996,571,1.996,572,1.996,573,1.996,574,1.996,575,1.996,576,4.137,577,3.047,578,1.996,579,1.996,580,1.996,581,1.996,582,1.996,583,3.047,584,4.137,585,1.996,586,3.047,587,1.996,588,3.047,589,4.697,590,4.137,591,1.996,592,3.047,593,1.996,594,1.996,595,1.996,596,1.996,597,4.137,598,1.996,599,1.996,600,1.996,601,1.996,602,3.047,603,1.996,604,1.996,605,1.996,606,1.996,607,1.996,608,3.047,609,1.996,610,1.996,611,1.996,612,3.047,613,1.996,614,1.996,615,3.415,616,3.047,617,1.996,618,1.996,619,1.996,620,1.996,621,1.996,622,1.996,623,1.996,624,1.996,625,3.047,626,1.996,627,1.996,628,1.996,629,1.996,630,3.696,631,1.996,632,1.996,633,1.996,634,1.996,635,1.996,636,1.996,637,3.047,638,1.996,639,1.996,640,1.996,641,1.996,642,1.996,643,3.047,644,1.996,645,1.996,646,1.996,647,3.047,648,3.047,649,1.996,650,1.996,651,1.996,652,1.996,653,1.996,654,1.996,655,1.996,656,1.996,657,1.996,658,1.996,659,1.996,660,1.648,661,1.996,662,1.996,663,1.996,664,1.996,665,1.996,666,1.996,667,1.648]],["title/modules.html",[20,1.864]],["body/modules.html",[8,0.032,16,0.032,17,0.032,19,2.661,20,1.918,30,2.126,31,2.369,32,1.918,615,4.713,668,5.709,669,5.709,670,5.709]],["title/overview.html",[671,3.418]],["body/overview.html",[2,1.155,8,0.036,10,2.374,16,0.026,17,0.026,18,1.155,19,3.637,20,1.407,21,1.407,22,1.739,23,1.739,24,1.407,25,1.739,26,1.739,27,2.581,28,2.581,29,2.581,30,2.731,31,3.11,32,2.517,33,2.341,34,1.739,35,1.56,45,1.739,62,2.517,65,2.581,66,2.581,67,2.581,78,2.278,104,1.407,339,2.374,356,2.581,358,2.581,457,2.581,458,2.581,459,2.581,671,2.581,672,4.758,673,3.127]],["title/properties.html",[106,1.649,511,2.113]],["body/properties.html",[8,0.037,16,0.033,17,0.033,106,2.022,176,1.83,660,3.709,667,3.709,674,4.493,675,4.493,676,4.493]],["title/miscellaneous/variables.html",[528,1.277,677,3.024]],["body/miscellaneous/variables.html",[8,0.036,16,0.032,17,0.032,47,0.893,82,1.218,105,3.141,206,3.725,207,3.649,231,2.458,262,2.206,419,3.649,528,2.206,677,3.649,678,4.421]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":675,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":507,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["1.1.23",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":508,"title":{},"body":{"coverage.html":{}}}],["11",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["1233",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":289,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":286,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:04:03+0000",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{}}}],["2.0.5",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["200",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":317,"title":{},"body":{"controllers/PostsController.html":{}}}],["2025",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":672,"title":{},"body":{"overview.html":{}}}],["4/4",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["6",{"_index":673,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":260,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["9",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["add",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["adds",{"_index":472,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice",{"_index":493,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":494,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":603,"title":{},"body":{"index.html":{}}}],["als",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["amazing",{"_index":653,"title":{},"body":{"index.html":{}}}],["api",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":284,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apiquery",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":553,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":58,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":660,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":62,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["aws",{"_index":592,"title":{},"body":{"index.html":{}}}],["backers",{"_index":654,"title":{},"body":{"index.html":{}}}],["based",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["beginning",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["bekommt",{"_index":442,"title":{},"body":{"controllers/UsersController.html":{}}}],["blog",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["board",{"_index":646,"title":{},"body":{"index.html":{}}}],["body",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":670,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":668,"title":{},"body":{"modules.html":{}}}],["buchstaben",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["building",{"_index":548,"title":{},"body":{"index.html":{}}}],["business",{"_index":467,"title":{},"body":{"injectables/UsersService.html":{}}}],["cases",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["channel",{"_index":618,"title":{},"body":{"index.html":{}}}],["characters",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["charaters",{"_index":265,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":602,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":587,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":356,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":357,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":358,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":457,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":458,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":459,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":609,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{}}}],["connection",{"_index":473,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('getusersparamdto",{"_index":446,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log('query",{"_index":447,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(createpostdto",{"_index":353,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":453,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(patchpostsdto",{"_index":355,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(patchuserdto",{"_index":456,"title":{},"body":{"controllers/UsersController.html":{}}}],["const",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":470,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["constructor(usersservice",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["content",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["content1",{"_index":371,"title":{},"body":{"injectables/PostsService.html":{}}}],["content2",{"_index":373,"title":{},"body":{"injectables/PostsService.html":{}}}],["context\":\"https://schema.org",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["context\":\"https:\\/\\/schema.org\",\\r\\n\"@type\":\"person\"\\r\\n",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["convert",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["courses",{"_index":624,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":495,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchUserDto.html":{}}}],["created",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{}}}],["createpost",{"_index":309,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(@body",{"_index":352,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":312,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":103,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":128,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":314,"title":{},"body":{"controllers/PostsController.html":{}}}],["createuserdto",{"_index":243,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["createusers",{"_index":376,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":452,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":379,"title":{},"body":{"controllers/UsersController.html":{}}}],["dann",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["database",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["date",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":620,"title":{},"body":{"index.html":{}}}],["default",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["defaultvaluepipe",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":50,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["demonstration",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":576,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":591,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":583,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":601,"title":{},"body":{"index.html":{}}}],["description",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":562,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":632,"title":{},"body":{"index.html":{}}}],["die",{"_index":440,"title":{},"body":{"controllers/UsersController.html":{}}}],["digits",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["discord",{"_index":617,"title":{},"body":{"index.html":{}}}],["dive",{"_index":619,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":496,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":533,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dto.ts",{"_index":239,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["dto.ts:6",{"_index":241,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["dto.ts:9",{"_index":242,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["dtos/create",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["dtos/createpostdto",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{}}}],["dtos/get",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":571,"title":{},"body":{"index.html":{}}}],["each",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":549,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":581,"title":{},"body":{"index.html":{}}}],["ein",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["eine",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["einen",{"_index":273,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["end",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["endpoint",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["ensure",{"_index":579,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":636,"title":{},"body":{"index.html":{}}}],["enum",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enum/poststatus.enum",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enum/posttype.enum",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":529,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["es",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["examples",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["exists",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{}}}],["experience",{"_index":622,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":293,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["false})@apiquery({name",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["fast",{"_index":595,"title":{},"body":{"index.html":{}}}],["featured",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":605,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":385,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":597,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["final",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{}}}],["find",{"_index":367,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":362,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":476,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":364,"title":{},"body":{"injectables/PostsService.html":{}}}],["finding",{"_index":484,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":469,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":482,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":246,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":604,"title":{},"body":{"index.html":{}}}],["follow",{"_index":640,"title":{},"body":{"index.html":{}}}],["following",{"_index":263,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["format",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":547,"title":{},"body":{"index.html":{}}}],["full",{"_index":635,"title":{},"body":{"index.html":{}}}],["function",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":541,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["für",{"_index":271,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["g",{"_index":600,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":384,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":322,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":49,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":310,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":321,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":543,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":479,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusers",{"_index":377,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":381,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":280,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":627,"title":{},"body":{"index.html":{}}}],["grow",{"_index":650,"title":{},"body":{"index.html":{}}}],["hands",{"_index":621,"title":{},"body":{"index.html":{}}}],["handy",{"_index":610,"title":{},"body":{"index.html":{}}}],["hello",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":625,"title":{},"body":{"index.html":{}}}],["here",{"_index":658,"title":{},"body":{"index.html":{}}}],["http://localhost:3000/images/image1.jpg",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":664,"title":{},"body":{"index.html":{}}}],["id",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["image",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":47,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":585,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":607,"title":{},"body":{"index.html":{}}}],["inject",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":44,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":45,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{}}}],["install",{"_index":599,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":560,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":454,"title":{},"body":{"controllers/UsersController.html":{}}}],["integer",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["integes",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["interact",{"_index":628,"title":{},"body":{"index.html":{}}}],["intro",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["isarray",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":267,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":248,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus)@isnotempty()@apiproperty({enum",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype)@isnotempty()@apiproperty({description",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":288,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isint()@isnotempty()@apiproperty({description",{"_index":295,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["iso8601",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isarray()@isstring({each",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":129,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional()@isiso8601()@apipropertyoptional({description",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isjson()@isoptional()@apipropertyoptional({description",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty",{"_index":240,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(2)@matches(/^[a",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(2)@maxlength(96",{"_index":250,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(4)@maxlength(96)@apiproperty({description",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":254,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@apipropertyoptional({description",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring()@isoptional()@minlength(2)@maxlength(96",{"_index":252,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isurl()@isoptional()@apipropertyoptional({description",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":643,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":645,"title":{},"body":{"index.html":{}}}],["john",{"_index":491,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":492,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":656,"title":{},"body":{"index.html":{}}}],["json",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":661,"title":{},"body":{"index.html":{}}}],["key",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["lastname",{"_index":247,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":613,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":259,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["license",{"_index":667,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":648,"title":{},"body":{"index.html":{}}}],["limit",{"_index":382,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":642,"title":{},"body":{"index.html":{}}}],["list",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{}}}],["logged",{"_index":489,"title":{},"body":{"injectables/UsersService.html":{}}}],["login",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":586,"title":{},"body":{"index.html":{}}}],["loop",{"_index":638,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["makes",{"_index":593,"title":{},"body":{"index.html":{}}}],["man",{"_index":439,"title":{},"body":{"controllers/UsersController.html":{}}}],["managing",{"_index":606,"title":{},"body":{"index.html":{}}}],["many",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["matches",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":269,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["mau",{"_index":589,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["message",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["metadata",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["methods",{"_index":48,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mindestens",{"_index":272,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minimum",{"_index":258,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":268,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(tagminlength",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["miscellaneous",{"_index":528,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":647,"title":{},"body":{"index.html":{}}}],["mode",{"_index":565,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":584,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":662,"title":{},"body":{"index.html":{}}}],["name",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":633,"title":{},"body":{"index.html":{}}}],["needs",{"_index":296,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":554,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":666,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":57,"title":{},"body":{"injectables/AppService.html":{},"classes/CreatePostDto.html":{},"dependencies.html":{},"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":303,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":315,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":546,"title":{},"body":{"index.html":{}}}],["npm",{"_index":559,"title":{},"body":{"index.html":{}}}],["number",{"_index":262,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["object",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":644,"title":{},"body":{"index.html":{}}}],["official",{"_index":590,"title":{},"body":{"index.html":{}}}],["oft",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{}}}],["one",{"_index":261,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["open",{"_index":649,"title":{},"body":{"index.html":{}}}],["operations",{"_index":468,"title":{},"body":{"injectables/UsersService.html":{}}}],["option",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["orderedmap",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["otherwise",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":671,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":511,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":383,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pagesize",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["pagination",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":283,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:12",{"_index":287,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":80,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parmeter",{"_index":474,"title":{},"body":{"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":634,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":299,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":294,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":302,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["passed",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patch()@apioperation({summary",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchpostdto",{"_index":290,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchpostsdto",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["patchuser",{"_index":378,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":455,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":300,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":466,"title":{},"body":{"injectables/UsersService.html":{}}}],["platform",{"_index":588,"title":{},"body":{"index.html":{}}}],["please",{"_index":616,"title":{},"body":{"index.html":{}}}],["position",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":582,"title":{},"body":{"index.html":{}}}],["post",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":316,"title":{},"body":{"controllers/PostsController.html":{}}}],["post()@apioperation({summary",{"_index":313,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":292,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:11",{"_index":298,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["posts",{"_index":308,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":360,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":306,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":339,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":567,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":545,"title":{},"body":{"index.html":{}}}],["project",{"_index":557,"title":{},"body":{"index.html":{}}}],["properties",{"_index":106,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/user.service",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":73,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["publication",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publiched",{"_index":536,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["published",{"_index":537,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["publishedon",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["query'})@apiquery({name",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":614,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":657,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":575,"title":{},"body":{"index.html":{}}}],["real",{"_index":629,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["regex",{"_index":270,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["registered",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":556,"title":{},"body":{"index.html":{}}}],["request",{"_index":450,"title":{},"body":{"controllers/UsersController.html":{}}}],["requesting",{"_index":488,"title":{},"body":{"injectables/UsersService.html":{}}}],["required",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":596,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":608,"title":{},"body":{"index.html":{}}}],["respect",{"_index":478,"title":{},"body":{"injectables/UsersService.html":{}}}],["response",{"_index":318,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":480,"title":{},"body":{"injectables/UsersService.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":535,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["run",{"_index":561,"title":{},"body":{"index.html":{}}}],["runs",{"_index":580,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":550,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":534,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["schema",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["see",{"_index":487,"title":{},"body":{"injectables/UsersService.html":{}}}],["sent",{"_index":449,"title":{},"body":{"controllers/UsersController.html":{}}}],["series",{"_index":540,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["server",{"_index":551,"title":{},"body":{"index.html":{}}}],["service",{"_index":366,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["setup",{"_index":558,"title":{},"body":{"index.html":{}}}],["side",{"_index":552,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":598,"title":{},"body":{"index.html":{}}}],["single",{"_index":485,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["slug'})@apiproperty({description",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["soderzeichen",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["special",{"_index":264,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["specific",{"_index":285,"title":{},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{}}}],["speichert",{"_index":445,"title":{},"body":{"controllers/UsersController.html":{}}}],["sponsors",{"_index":652,"title":{},"body":{"index.html":{}}}],["src/.../createpostdto.ts",{"_index":678,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":542,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":530,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":531,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":46,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":51,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":462,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":486,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":72,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:10",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:18",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":502,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":238,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/createpostdto.ts",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/posts/dtos/createpostdto.ts:123",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpostdto.ts:149",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpostdto.ts:32",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpostdto.ts:40",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpostdto.ts:53",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpostdto.ts:58",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpostdto.ts:66",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpostdto.ts:77",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpostdto.ts:85",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/createpostdto.ts:93",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["src/posts/dtos/patch",{"_index":291,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enum/poststatus.enum.ts",{"_index":532,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enum/posttype.enum.ts",{"_index":538,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":307,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:12",{"_index":323,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:23",{"_index":320,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:35",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":359,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":361,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":363,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:7",{"_index":365,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":244,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":281,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":301,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/user.service",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/user.service.ts",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/user.service.ts:25",{"_index":477,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/user.service.ts:45",{"_index":483,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/user.service.ts:9",{"_index":471,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":375,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:57",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:77",{"_index":380,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:83",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":460,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":563,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":566,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":568,"title":{},"body":{"index.html":{}}}],["started",{"_index":544,"title":{"index.html":{}},"body":{}}],["starter",{"_index":555,"title":{},"body":{"index.html":{}}}],["statements",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":637,"title":{},"body":{"index.html":{}}}],["steps",{"_index":577,"title":{},"body":{"index.html":{}}}],["story",{"_index":539,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":594,"title":{},"body":{"index.html":{}}}],["string",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successful",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully",{"_index":319,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":351,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":615,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":669,"title":{},"body":{"modules.html":{}}}],["table",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tagminlength",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tags",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":578,"title":{},"body":{"index.html":{}}}],["teile",{"_index":441,"title":{},"body":{"controllers/UsersController.html":{}}}],["test",{"_index":369,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":573,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":572,"title":{},"body":{"index.html":{}}}],["tests",{"_index":569,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":651,"title":{},"body":{"index.html":{}}}],["thee",{"_index":475,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.authservice.isauth",{"_index":490,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.postsservice.findall(userid",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":451,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(id",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":368,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":630,"title":{},"body":{"index.html":{}}}],["title",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["title1",{"_index":370,"title":{},"body":{"injectables/PostsService.html":{}}}],["title2",{"_index":372,"title":{},"body":{"injectables/PostsService.html":{}}}],["token",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":659,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@apipropertyoptional({type",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@minlength(tagminlength",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined)@apipropertyoptional({type",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":665,"title":{},"body":{"index.html":{}}}],["type",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type\":\"person",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["typeof",{"_index":448,"title":{},"body":{"controllers/UsersController.html":{}}}],["types",{"_index":304,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["und",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/UsersController.html":{}}}],["undefined",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":570,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":676,"title":{},"body":{"properties.html":{}}}],["update",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":297,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updatepost",{"_index":311,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":354,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostsdto",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":639,"title":{},"body":{"index.html":{}}}],["url",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["use",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["used",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":305,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":245,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:15",{"_index":251,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:21",{"_index":253,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:25",{"_index":249,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":266,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user/1233",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["userid",{"_index":324,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":282,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":461,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/:id??limit=10&page=1",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/users.module",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["users?limit=10&page=2",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["userscontroller",{"_index":374,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":78,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":481,"title":{},"body":{"injectables/UsersService.html":{}}}],["using",{"_index":631,"title":{},"body":{"index.html":{}}}],["valid",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["validiert",{"_index":443,"title":{},"body":{"controllers/UsersController.html":{}}}],["value",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["variable",{"_index":506,"title":{},"body":{"coverage.html":{}}}],["variablen",{"_index":444,"title":{},"body":{"controllers/UsersController.html":{}}}],["variables",{"_index":677,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":674,"title":{},"body":{"properties.html":{}}}],["video",{"_index":623,"title":{},"body":{"index.html":{}}}],["visit",{"_index":612,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":626,"title":{},"body":{"index.html":{}}}],["void",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":564,"title":{},"body":{"index.html":{}}}],["website",{"_index":663,"title":{},"body":{"index.html":{}}}],["wie",{"_index":438,"title":{},"body":{"controllers/UsersController.html":{}}}],["work",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":611,"title":{},"body":{"index.html":{}}}],["world",{"_index":56,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":641,"title":{},"body":{"index.html":{}}}],["yor",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["you'd",{"_index":655,"title":{},"body":{"index.html":{}}}],["you're",{"_index":574,"title":{},"body":{"index.html":{}}}],["z0",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":257,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":256,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":255,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zeigt",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["ziffer",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n// User created modules\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World from NestJS!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:10\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n  public login(email: string, password: string, id: string) {\n    // Check user exists in database\n    const user = this.usersService.findOneById(id);\n    // login\n    // return token\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/createPostDto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@ApiPropertyOptional({description: 'The content of the post', example: 'This is my post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostDto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()@IsOptional()@ApiPropertyOptional({description: 'Featured image for the blog post', example: 'http://localhost:3000/images/image1.jpg'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostDto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)@ApiPropertyOptional({type: 'array', items: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostDto.ts:149\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(PostType)@IsNotEmpty()@ApiProperty({description: 'This is the type of the post to create', enum: PostType})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostDto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsISO8601()@ApiPropertyOptional({description: 'The date of the publication of the post in an ISO8601 format', example: '2025-03-16T07:04:03+0000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostDto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsJSON()@IsOptional()@ApiPropertyOptional({description: 'The schema of the post (it must be a valid json, otherwise a validation error will be thrown)', example: '{\n \"@context\":\"https://schema.org\",\n\"@type\":\"Person\"\n }'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostDto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(2)@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'slug must only contain lowercase letter, digits and -. The - must neither be at the beginning nor at the end of the slug'})@ApiProperty({description: 'The slug for this post - used in the URL for the post.', example: 'my-post'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostDto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(PostStatus)@IsNotEmpty()@ApiProperty({enum: PostStatus, description: 'The status the post has.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostDto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@IsString({each: true})@MinLength(tagMinLength, {each: true})@ApiPropertyOptional({type: 'array', items: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostDto.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(4)@MaxLength(96)@ApiProperty({description: 'The title of the post', example: 'my post title'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/createPostDto.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsArray,\n  //  IsDate,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MaxLength,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { PostType } from '../enum/postType.enum';\nimport { PostStatus } from '../enum/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-metaoptions-dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nconst tagMinLength = 3;\n\nexport class CreatePostDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(4)\n  @MaxLength(96)\n  @ApiProperty({\n    description: 'The title of the post',\n    example: 'my post title',\n  })\n  title: string;\n\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'This is the type of the post to create',\n    enum: PostType,\n  })\n  postType: PostType;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(2)\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'slug must only contain lowercase letter, digits and -. The - must neither be at the beginning nor at the end of the slug',\n  })\n  @ApiProperty({\n    description: 'The slug for this post - used in the URL for the post.',\n    example: 'my-post',\n  })\n  slug: string;\n\n  @IsEnum(PostStatus)\n  @IsNotEmpty()\n  @ApiProperty({ enum: PostStatus, description: 'The status the post has.' })\n  status: PostStatus;\n\n  @IsString()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description: 'The content of the post',\n    example: 'This is my post',\n  })\n  content?: string;\n\n  @IsString()\n  @IsJSON()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description:\n      'The schema of the post (it must be a valid json, otherwise a validation error will be thrown)',\n    example:\n      '{\\r\\n \"@context\":\"https:\\/\\/schema.org\",\\r\\n\"@type\":\"Person\"\\r\\n }',\n  })\n  schema?: string;\n\n  @IsUrl()\n  @IsOptional()\n  @ApiPropertyOptional({\n    description: 'Featured image for the blog post',\n    example: 'http://localhost:3000/images/image1.jpg',\n  })\n  featuredImageUrl?: string;\n\n  @IsOptional()\n  @IsISO8601() // @IsDate()\n  @ApiPropertyOptional({\n    description: 'The date of the publication of the post in an ISO8601 format',\n    example: '2025-03-16T07:04:03+0000',\n  })\n  publishedOn?: Date;\n\n  @IsOptional()\n  @IsArray()\n  @IsString({ each: true })\n  @MinLength(tagMinLength, { each: true })\n  // @ApiPropertyOptional({\n  //   description:\n  //     'Array of tags passed as string values (each tag must have at least 3 characters)',\n  //   example: ['nestjs', 'typescript'],\n  // })\n  @ApiPropertyOptional({\n    type: 'array',\n    //description: 'an array of tags you want to add to your post',\n    items: {\n      type: 'string',\n      description: 'The tags you want to add to your post',\n      minLength: tagMinLength,\n      example: 'nestjs',\n      examples: ['nestjs', 'typescript'],\n      //examples: ['nestjs', 'typescript'],\n\n      // this does not work - es zeigt tags dann als OrderedMap an\n      // examples: {\n      //   nestjs: { value: 'nestjs' },\n      //   typescript: { value: 'typescript' },\n      // },\n    },\n    //example: ['nestjs', 'typescript'],\n  })\n  tags?: string[];\n\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  @ApiPropertyOptional({\n    type: 'array',\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'The key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'The value of the meta option key',\n          example: true,\n        },\n      },\n    },\n    required: false,\n  })\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-metaoptions-dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metaoptions-dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-metaoptions-dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(2)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(2)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'a minimum length of 8 characters, at least one letter, on number and on of the following special charaters (@$!%*#?&)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(2)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(2)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'a minimum length of 8 characters, at least one letter, on number and on of the following special charaters (@$!%*#?&)',\n  }) // RegEx für mindestens einen Buchstaben, eine Ziffer und ein Soderzeichen (@$!%*#?&)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific id', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific id',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()@IsNotEmpty()@ApiProperty({description: 'The ID of the post that needs to be updated'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { CreatePostDto } from './createPostDto';\nimport { IsInt, IsNotEmpty } from 'class-validator';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @IsInt()\n  @IsNotEmpty()\n  @ApiProperty({\n    description: 'The ID of the post that needs to be updated',\n  })\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({summary: 'Creates a new post'})@ApiResponse({status: 201, description: 'You get a 201 response, if your post is created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostsDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()@ApiOperation({summary: 'Update a particular post'})@ApiResponse({status: 200, description: 'Yor get a 200 response, if the update oft the post was successful.'})\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostsDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/createPostDto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n  @Post()\n  @ApiOperation({\n    summary: 'Creates a new post',\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response, if your post is created successfully',\n  })\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n    return 'you created a post';\n  }\n\n  @Patch()\n  @ApiOperation({ summary: 'Update a particular post' })\n  @ApiResponse({\n    status: 200,\n    description:\n      'Yor get a 200 response, if the update oft the post was successful.',\n  })\n  public updatePost(@Body() patchPostsDto: PatchPostDto) {\n    console.log(patchPostsDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/user.service';\n\n@Injectable()\nexport class PostsService {\n  constructor(private readonly usersService: UsersService) {}\n  public findAll(userId: string) {\n    // Users service\n    // find a user\n    const user = this.usersService.findOneById(userId);\n\n    return [\n      {\n        user,\n        title: 'Test Title1',\n        content: 'Test Content1',\n      },\n      {\n        user,\n        title: 'Test Title2',\n        content: 'Test Content2',\n      },\n    ];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application'})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})@ApiQuery({name: 'limit', description: 'how many results should be returned per query', example: 10, type: 'number', required: false})@ApiQuery({name: 'page', description: 'the position of the page number you want the API to return', example: 1, type: 'number', required: false})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Patch,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/user.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    // Injecting Users Service\n    private readonly usersService: UsersService,\n  ) {}\n  /*\n   * Final Endpoint - /users/:id??limit=10&page=1\n   * Param id - optional, convert to integer, cannot have a default value\n   * Query limit - integer, default 10\n   * Query page - integes, default 1\n   * ==> USE CASES\n   * /user/ -> return all users with default pagination\n   * /user/1233 -> return one user who has the id 1233\n   * /users?limit=10&page=2 -> return page 2 with pagesize of limit (10) - so users 11 to 20\n   */\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  @ApiQuery({\n    name: 'limit',\n    description: 'how many results should be returned per query',\n    example: 10,\n    type: 'number',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'page',\n    description: 'the position of the page number you want the API to return',\n    example: 1,\n    type: 'number',\n    required: false,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    /*  // Demonstration wie man die URL Teile bekommt, validiert und als Variablen speichert\n    console.log('getUsersParamDto', getUsersParamDto);\n    console.log('Query limit:', typeof limit, limit);\n    console.log('Query page:', typeof page, page);\n    const { id } = getUsersParamDto;\n    if (id) {\n      return `You sent a get request to users endpoint - for User ${id}`;\n    } else {\n      return `You sent a get request to users endpoint - for no specific user`;\n    }\n*/\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n    console.log(createUserDto instanceof CreateUserDto);\n    return 'You sent a post request to users endpoint';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    console.log(patchUserDto);\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/user.service';\nimport { AuthModule } from 'src/auth/auth.module';\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            Constructor of the UsersService class - it adds the connection to the AuthService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the parmeter to thee authService\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:25\n                        \n                    \n\n\n            \n                \n                        get all users - with respect to pagination\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    retrieves all users from the database. It uses pagination\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/user.service.ts:45\n                        \n                    \n\n\n            \n                \n                        finding a single user by the id of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: string; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n/**\n * Class to connect to Users table and perform business operations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor of the UsersService class - it adds the connection to the AuthService\n   * @param authService the parmeter to thee authService\n   */\n  constructor(\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n  ) {}\n  /**\n   * get all users - with respect to pagination\n   * @param getUserParamDto retrieves all users from the database. It uses pagination\n   * @param limit\n   * @param page\n   * @returns\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    // Auth service - to see if the requesting user is logged in\n    if (this.authService.isAuth()) {\n      return [\n        { firstName: 'John', email: 'john@doe.com' },\n        { firstName: 'Alice', email: 'alice@doe.com' },\n      ];\n    }\n  }\n\n  // Find a user by ID\n  /**\n   * finding a single user by the id of the user\n   * @param id\n   * @returns\n   */\n  public findOneById(id: string) {\n    return { id, firstName: 'Alice', email: 'alice@doe.com' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-metaoptions-dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/createPostDto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/createPostDto.ts\n            \n            variable\n            tagMinLength\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/user.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            nestjs-intro : file:\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            PostType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enum/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLICHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enum/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            tagMinLength   (src/.../createPostDto.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/dtos/createPostDto.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        tagMinLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 3\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
